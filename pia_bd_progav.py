# -*- coding: utf-8 -*-
"""pia_bd_progav.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lsHxdcYbi4sbG2eWqpmvA0U5lXWHReeu
"""

import pandas as pd
import os
import json

class tres_programas:

    @staticmethod
    def archivos_texto():
        respuesta = int(input("¿Qué acción quieres realizar? Marca 1 para comprar gasolina, marca 2 si quieres registrar datos de un dinosaurio o marca 3 para registrar el total a pagar con descuento incluido: "))

        if respuesta == 1:
            cant_tg, apagar = tres_programas.gasolina()
            tres_programas.guardar_resultados("corrida_gasolina.json", "contador_gasolina.txt", cant_tg, apagar)

        elif respuesta == 2:
            nombre, pes, lon, peskill_d, longment_d = tres_programas.dinosaurio()
            tres_programas.guardar_resultados("corridas_dinosaurio.json", "contador_dinosaurio.txt", peskill_d, longment_d)

        elif respuesta == 3:
            resultados_desc = tres_programas.descuento_clientes()
            tres_programas.guardar_resultados_descuentos(resultados_desc)

        else:
            print("Opción no válida")

    @staticmethod
    def gasolina():
        capacidad = 3.785
        precio_lt = 8.20

        print("La capacidad de cada galón es de 3.785 lt")
        print("El precio es de $8.20 por litro")

        cant_galones = int(input("¿Cuántos galones necesitas?: "))
        gal = cant_galones * capacidad
        total = gal * precio_lt

        print("El total de gasolina a cargar es:", gal, "lt")
        print("El precio total a pagar es de: $", total)

        return gal, total

    @staticmethod
    def dinosaurio():
        nom = input("Nombre del dinosaurio: ")
        pes = int(input("Peso en kilos: "))
        lon = int(input("Longitud en metros: "))

        peskill_d = pes * 1000
        print("El peso en kilogramos es", peskill_d)
        longment_d = float(input("Longitud en metros: "))

        return nom, pes, lon, peskill_d, longment_d

    @staticmethod
    def descuento_clientes():
        num_corridas = int(input("Ingrese el número de corridas: "))
        resultados_desc = []

        for _ in range(num_corridas):
            compra = float(input("Ingresa el monto de la compra: "))
            pagar = tres_programas.calc_descuento_clientes(compra)
            resultados_desc.append((len(resultados_desc) + 1, compra, pagar))

        tres_programas.mostrar_resultados(resultados_desc)
        return resultados_desc

    @staticmethod
    def calc_descuento_clientes(compra):
        pagar = 0
        if compra < 500:
            pagar = compra
        elif 500 <= compra <= 1000:
            pagar = compra - compra * 0.05
        elif 1000 < compra <= 7000:
            pagar = compra - compra * 0.11
        elif 7000 < compra <= 15000:
            pagar = compra - compra * 0.18
        else:
            pagar = compra - compra * 0.25
        return pagar

    @staticmethod
    def mostrar_resultados(resultados_desc):
        df = pd.DataFrame(resultados_desc, columns=["Num. de Corrida", "Datos o Monto de la Compra", "Resultado Total"])
        print("\nResultados aplicados con descuento:")
        print(df)

    @staticmethod
    def guardar_resultados(archivo_json, archivo_contador, *args):
        registro_actual = {"corrida": 0}
        archivos_existentes = [archivo_json, archivo_contador]

        for arg in args:
            registro_actual[f"total_{arg}"] = arg

        for archivo in archivos_existentes:
            if os.path.exists(archivo):
                with open(archivo, "r") as file:
                    registros = json.load(file)
                    contador = registros[-1]["corrida"] + 1
            else:
                registros = []
                contador = 1

            registro_actual["corrida"] = contador
            registros.append(registro_actual)

            with open(archivo, "w") as file:
                json.dump(registros, file, indent=2)
        print(f"Datos guardados en archivos: {archivo_json} y {archivo_contador}")

    @staticmethod
    def guardar_resultados_descuentos(resultados_desc):
        nombre_archivo_csv = "resultados_descuentos.csv"
        nombre_archivo_txt = "resultados_descuentos.txt"

        tres_programas.guardar_resultados_csv(resultados_desc, nombre_archivo_csv)
        tres_programas.guardar_resultados_txt(resultados_desc, nombre_archivo_txt)

    @staticmethod
    def guardar_resultados_csv(resultados_desc, nombre_archivo):
        df = pd.DataFrame(resultados_desc, columns=["Num. de Corrida", "Datos o Monto de la Compra", "Resultado Total"])
        df.to_csv(nombre_archivo, index=False)
        print(f"El resultado se guardó en cvs como: {nombre_archivo}")

    @staticmethod
    def guardar_resultados_txt(resultados_desc, nombre_archivo):
        with open(nombre_archivo, 'w') as archivo:
            archivo.write("Resultados de descuentos:\n")
            for resultado in resultados_desc:
                archivo.write(f"Número de Corrida: {resultado[0]}, Monto de la Compra: {resultado[1]}, Resultado Total: {resultado[2]}\n")
        print(f"El resultado se guardó en archivo de texto como: {nombre_archivo}")


if __name__ == "__main__":
    tres_programas.archivos_texto()